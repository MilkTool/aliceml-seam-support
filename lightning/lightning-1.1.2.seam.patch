diff -rNu lightning-1.1.2/lightning/core-common.h lightning-1.1.2-seam-patches/lightning/core-common.h
--- lightning-1.1.2/lightning/core-common.h	2003-11-14 23:15:09.000000000 +0100
+++ lightning-1.1.2-seam-patches/lightning/core-common.h	2004-03-16 10:46:17.000000000 +0100
@@ -46,6 +46,7 @@
 } jit_state;
 
 static jit_state 			_jit;
+inline void dummy(void) { _jit = _jit; }
 
 #define JIT_NOREG			(-1)
 
diff -rNu lightning-1.1.2/lightning/funcs-common.h lightning-1.1.2-seam-patches/lightning/funcs-common.h
--- lightning-1.1.2/lightning/funcs-common.h	2003-05-15 09:15:15.000000000 +0200
+++ lightning-1.1.2-seam-patches/lightning/funcs-common.h	2004-03-16 09:47:12.000000000 +0100
@@ -34,10 +34,10 @@
 
 #include <stdio.h>
 
-static int jit_fail(char *, char*, int, char *) JIT_UNUSED;
+static int jit_fail(const char *, const char*, int, const char *) JIT_UNUSED;
 
 int
-jit_fail(char *msg, char *file, int line, char *function)
+jit_fail(const char *msg, const char *file, int line, const char *function)
 {
   fprintf(stderr, "%s: In function `%s':\n", file, function);
   fprintf(stderr, "%s:%d: %s\n", file, line, msg);
diff -rNu lightning-1.1.2/lightning/i386/core.h lightning-1.1.2-seam-patches/lightning/i386/core.h
--- lightning-1.1.2/lightning/i386/core.h	2003-11-14 23:17:17.000000000 +0100
+++ lightning-1.1.2-seam-patches/lightning/i386/core.h	2004-03-16 09:01:51.000000000 +0100
@@ -353,10 +353,10 @@
 #define jit_bgei_i(label, rs, is)	jit_bra_i0((rs), (is), JGEm(label,0,0,0), JNSm(label,0,0,0) )
 #define jit_beqi_i(label, rs, is)	jit_bra_i0((rs), (is), JEm(label, 0,0,0), JEm(label, 0,0,0) )
 #define jit_bnei_i(label, rs, is)	jit_bra_i0((rs), (is), JNEm(label,0,0,0), JNEm(label,0,0,0) )
-#define jit_blti_ui(label, rs, is)	jit_bra_i ((rs), (is), JLm(label, 0,0,0)		    )
-#define jit_blei_ui(label, rs, is)	jit_bra_i0((rs), (is), JLEm(label,0,0,0), JEm(label, 0,0,0) )
-#define jit_bgti_ui(label, rs, is)	jit_bra_i0((rs), (is), JGm(label, 0,0,0), JNEm(label,0,0,0) )
-#define jit_bgei_ui(label, rs, is)	jit_bra_i ((rs), (is), JGEm(label,0,0,0)		    )
+#define jit_blti_ui(label, rs, is)	jit_bra_i ((rs), (is), JBm(label, 0,0,0)		    )
+#define jit_blei_ui(label, rs, is)	jit_bra_i0((rs), (is), JBEm(label,0,0,0), JEm(label, 0,0,0) )
+#define jit_bgti_ui(label, rs, is)	jit_bra_i0((rs), (is), JAm(label, 0,0,0), JNEm(label,0,0,0) )
+#define jit_bgei_ui(label, rs, is)	jit_bra_i ((rs), (is), JAEm(label,0,0,0)		    )
 #define jit_boaddi_i(label, rs, is)	(ADDLir((is), (rs)), JOm(label,0,0,0), _jit.x.pc)
 #define jit_bosubi_i(label, rs, is)	(SUBLir((is), (rs)), JOm(label,0,0,0), _jit.x.pc)
 #define jit_boaddi_ui(label, rs, is)	(ADDLir((is), (rs)), JCm(label,0,0,0), _jit.x.pc)
@@ -367,6 +367,7 @@
 
 #define jit_jmpi(label)		(JMPm( ((unsigned long) (label)),	0, 0, 0), _jit.x.pc)
 #define jit_calli(label)	(CALLm( ((unsigned long) (label)),	0, 0, 0), _jit.x.pc)
+#define jit_callr(reg)          (CALLsr(reg))
 #define jit_jmpr(reg)		JMPsr(reg)
 #define jit_patch(jump_pc)	(*_PSL((jump_pc) - 4) = _SL(_jit.x.pc - (jump_pc)))
 #define jit_ret()		(POPLr(_EDI), POPLr(_ESI), POPLr(_EBX), POPLr(_EBP), RET())
diff -rNu lightning-1.1.2/lightning/ppc/core.h lightning-1.1.2-seam-patches/lightning/ppc/core.h
--- lightning-1.1.2/lightning/ppc/core.h	2003-11-14 23:19:38.000000000 +0100
+++ lightning-1.1.2-seam-patches/lightning/ppc/core.h	2004-03-16 10:20:34.000000000 +0100
@@ -160,6 +160,7 @@
 #define jit_boaddr_ui(label, s1, s2)	(		  			     ADDCrr((s1), (s1), (s2)), 	   MCRXRi(0), BEQi((label)), _jit.x.pc)
 #define jit_bosubr_ui(label, s1, s2)	(		  			     SUBCrr((s1), (s1), (s2)), 	   MCRXRi(0), BEQi((label)), _jit.x.pc)
 #define jit_calli(label)	    (jit_movei(JIT_AUX, (label)), MTLRr(JIT_AUX), BLRL(), _jit.x.pc)
+#define jit_callr(reg)              (MTCTRr(reg), BCTRL())
 #define jit_divi_i(d, rs, is)		jit_chk_ims(1111111, 0, DIVWrrr ((d), (rs), JIT_AUX))
 #define jit_divi_ui(d, rs, is)		jit_chk_imu(1111111, 0, DIVWUrrr((d), (rs), JIT_AUX))
 #define jit_divr_i(d, s1, s2)				        DIVWrrr ((d), (s1), (s2))
diff -rNu lightning-1.1.2/lightning/ppc/funcs.h lightning-1.1.2-seam-patches/lightning/ppc/funcs.h
--- lightning-1.1.2/lightning/ppc/funcs.h	2003-11-22 13:30:02.000000000 +0100
+++ lightning-1.1.2-seam-patches/lightning/ppc/funcs.h	2004-03-16 11:32:22.000000000 +0100
@@ -29,11 +29,11 @@
  *
  ***********************************************************************/
 
-
-
 #ifndef __lightning_funcs_h
 #define __lightning_funcs_h
 
+#include <string.h>
+
 #if !defined(__GNUC__) && !defined(__GNUG__)
 #error Go get GNU C, I do not know how to flush the cache
 #error with this compiler.
@@ -95,9 +95,7 @@
  *   - R25-R20 = parameters (order is reversed, 1st argument is R25)
  */
 static jit_insn *
-_jit_trampoline(jit, n)
-     register jit_state *jit;
-     register int	n;
+_jit_trampoline(register jit_state *jit, register int n)
 {
   static jit_insn	trampolines[200];
   static jit_insn	*p_trampolines[6], *free = trampolines;
@@ -138,9 +136,7 @@
 }
 
 static void
-_jit_prolog(jit, n)
-     register jit_state *jit;
-     register int	n;
+_jit_prolog(register jit_state *jit, register int n)
 {
   register jit_insn	*save_pc, *trampo;
 
diff -rNu lightning-1.1.2/lightning/ppc/funcs.h~ lightning-1.1.2-seam-patches/lightning/ppc/funcs.h~
--- lightning-1.1.2/lightning/ppc/funcs.h~	1970-01-01 01:00:00.000000000 +0100
+++ lightning-1.1.2-seam-patches/lightning/ppc/funcs.h~	2004-03-16 11:30:28.000000000 +0100
@@ -0,0 +1,157 @@
+/******************************** -*- C -*- ****************************
+ *
+ *	Platform-independent layer inline functions (PowerPC)
+ *
+ ***********************************************************************/
+
+
+/***********************************************************************
+ *
+ * Copyright 2000, 2001, 2002, 2003 Free Software Foundation, Inc.
+ * Written by Paolo Bonzini.
+ *
+ * This file is part of GNU lightning.
+ *
+ * GNU lightning is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as published
+ * by the Free Software Foundation; either version 2.1, or (at your option)
+ * any later version.
+ * 
+ * GNU lightning is distributed in the hope that it will be useful, but 
+ * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+ * or  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
+ * License for more details.
+ * 
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with GNU lightning; see the file COPYING.LESSER; if not, write to the
+ * Free Software Foundation, 59 Temple Place - Suite 330, Boston,
+ * MA 02111-1307, USA.
+ *
+ ***********************************************************************/
+
+
+
+#ifndef __lightning_funcs_h
+#define __lightning_funcs_h
+
+#if !defined(__GNUC__) && !defined(__GNUG__)
+#error Go get GNU C, I do not know how to flush the cache
+#error with this compiler.
+#else
+static void
+jit_flush_code(void *start, void *end)
+{
+#ifndef LIGHTNING_CROSS
+  register char *ddest, *idest;
+
+  static int cache_line_size;
+  if (cache_line_size == 0) {
+    char buffer[8192];
+    int i, probe;
+
+    /* Find out the size of a cache line by zeroing one */
+    memset(buffer, 0xFF, 8192);
+    __asm__ __volatile__ ("dcbz 0,%0" : : "r"(buffer + 4096));
+
+    /* Probe for the beginning of the cache line. */
+    for(i = 0, probe = 4096; probe; probe >>= 1)
+      if (buffer[i | probe] != 0x00)
+        i |= probe;
+
+    /* i is now just before the start of the cache line */
+    i++;
+    for(cache_line_size = 1; i + cache_line_size < 8192; cache_line_size <<= 1)
+      if (buffer[i + cache_line_size] != 0x00)
+        break;
+  }
+
+  start -= ((long) start) & (cache_line_size - 1);
+  end -= ((long) end) & (cache_line_size - 1);
+
+  /* Force data cache write-backs */
+  for (ddest = start; ddest <= (char *) end; ddest += cache_line_size) {
+    __asm__ __volatile__ ("dcbst 0,%0" : : "r"(ddest));
+  }
+  __asm__ __volatile__ ("sync" : : );
+
+  /* Now invalidate the instruction cache */
+  for (idest = start; idest <= (char *) end; idest += cache_line_size) {
+    __asm__ __volatile__ ("icbi 0,%0" : : "r"(idest));
+  }
+  __asm__ __volatile__ ("isync" : : );
+#endif /* !LIGHTNING_CROSS */
+}
+#endif /* __GNUC__ || __GNUG__ */
+
+#define _jit (*jit)
+
+/* Emit a trampoline for a function.
+ * Upon entrance to the trampoline:
+ *   - R0      = return address for the function
+ *   - LR      = address where the real code for the function lies
+ *   - R3-R8   = parameters
+ * After jumping to the address pointed to by R10:
+ *   - LR      = address where the epilog lies (the function must return there)
+ *   - R25-R20 = parameters (order is reversed, 1st argument is R25)
+ */
+static jit_insn *
+_jit_trampoline(register jit_state *jit, register int n)
+{
+  static jit_insn	trampolines[200];
+  static jit_insn	*p_trampolines[6], *free = trampolines;
+  jit_insn		*trampo;
+  int			i, ofs, frame_size;
+
+  if (!p_trampolines[n]) {
+    _jit.x.pc = trampo = p_trampolines[n] = free;
+
+    frame_size = 24 + (6 + n) * 4;	/* r26..r31 + args		   */
+    frame_size += 15;			/* the stack must be quad-word     */
+    frame_size &= ~15;			/* aligned			   */
+
+    STWUrm(1, -frame_size, 1);		/* stwu  r1, -x(r1)		   */
+
+    for (ofs = frame_size - (6 + n) * 4, i = 26 - n; i <= 31; ofs += 4, i++) {
+      STWrm(i, ofs, 1);			/* stw   rI, ofs(r1)		   */
+    }
+    STWrm(0, ofs+4, 1);			/* stw   r0, x(r1)		   */
+    for (i = 0; i < n; i++) {
+      MRrr(25-i, 3+i);			/* save parameters in r25..r20	   */
+    }
+    BLRL();				/* blrl				   */
+    LWZrm(0, ofs+4, 1);			/* lwz   r0, x(r1)  (ret.addr.)    */
+    MTLRr(0);				/* mtspr LR, r0			   */
+
+    for (ofs = frame_size - (6 + n) * 4, i = 26 - n; i <= 31; ofs += 4, i++) {
+      LWZrm(i, ofs, 1);			/* lwz   rI, ofs(r1)		   */
+    }
+    ADDIrri(1, 1, frame_size);		/* addi  r1, r1, x		   */
+    BLR();				/* blr				   */
+
+    jit_flush_code(trampo, _jit.x.pc);
+    free = _jit.x.pc;
+  }
+
+  return p_trampolines[n];
+}
+
+static void
+_jit_prolog(register jit_state *jit, register int n)
+{
+  register jit_insn	*save_pc, *trampo;
+
+  save_pc = _jit.x.pc;
+  trampo = _jit_trampoline(jit, n);
+  _jit.x.pc = save_pc;
+
+  _jitl.nextarg_get = 25;
+  MFLRr(0);
+  MOVEIri(10, trampo);
+  MTLRr(10);
+  BLRL();				/* blrl				  */
+  MFLRr(31);				/* mflr  r31			  */
+}
+
+#undef _jit
+
+#endif /* __lightning_funcs_h */
